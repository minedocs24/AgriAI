// Resto del schema - da aggiungere alla fine del file schema.prisma

// Keywords Table
model Keyword {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyword          String  @unique @db.VarChar(100)
  normalized       String  @db.VarChar(100)
  frequency        Int     @default(1)
  categoryAffinity Json    @default("{}") @map("category_affinity") @db.JsonB
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  documents  DocumentKeyword[]
  categories CategoryKeyword[]

  @@index([normalized], map: "idx_keywords_normalized")
  @@index([frequency], map: "idx_keywords_frequency")
  @@map("keywords")
}

// Document Keywords Junction Table
model DocumentKeyword {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId       String            @map("document_id") @db.Uuid
  keywordId        String            @map("keyword_id") @db.Uuid
  relevanceScore   Decimal           @default(1.0) @map("relevance_score") @db.Decimal(4, 3)
  extractionMethod ExtractionMethod  @default(MANUAL) @map("extraction_method")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  keyword  Keyword  @relation(fields: [keywordId], references: [id])

  @@unique([documentId, keywordId])
  @@index([documentId, relevanceScore], map: "idx_document_keywords_document")
  @@index([keywordId, relevanceScore], map: "idx_document_keywords_keyword")
  @@map("document_keywords")
}

// Category Keywords Junction Table
model CategoryKeyword {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  keywordId  String   @map("keyword_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  keyword  Keyword  @relation(fields: [keywordId], references: [id])

  @@unique([categoryId, keywordId])
  @@map("category_keywords")
}

// Document Analysis Table (AI Analysis)
model DocumentAnalysis {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId           String   @unique @map("document_id") @db.Uuid
  summary              String?
  extractedEntities    Json     @default("[]") @map("extracted_entities") @db.JsonB
  topics               Json     @default("[]") @db.JsonB
  readabilityScore     Decimal? @map("readability_score") @db.Decimal(4, 2)
  complexityScore      Decimal? @map("complexity_score") @db.Decimal(4, 2)
  confidence           Decimal? @db.Decimal(4, 3)
  languageConfidence   Decimal? @map("language_confidence") @db.Decimal(4, 3)
  processingModel      String?  @map("processing_model") @db.VarChar(100)
  processingTimeMs     Int?     @map("processing_time_ms")
  tokenCount           Int?     @map("token_count")
  correlations         Json     @default("[]") @db.JsonB
  qualityMetrics       Json     @default("{}") @map("quality_metrics") @db.JsonB
  ragOptimization      Json     @default("{}") @map("rag_optimization") @db.JsonB
  retrievalKeywords    String[] @map("retrieval_keywords")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([confidence], map: "idx_document_analysis_confidence")
  @@index([readabilityScore, complexityScore], map: "idx_document_analysis_quality")
  @@map("document_analysis")
}

// Document Embeddings Table (Vector Storage)
model DocumentEmbedding {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId       String  @map("document_id") @db.Uuid
  chunkIndex       Int     @default(0) @map("chunk_index")
  chunkText        String  @map("chunk_text")
  chunkStartChar   Int?    @map("chunk_start_char")
  chunkEndChar     Int?    @map("chunk_end_char")
  embeddingModel   String  @map("embedding_model") @db.VarChar(100)
  embedding        Unsupported("vector(1536)")?
  embeddingVersion Int     @default(1) @map("embedding_version")
  tokenCount       Int?    @map("token_count")
  chunkMetadata    Json    @default("{}") @map("chunk_metadata") @db.JsonB
  retrievalScore   Decimal? @map("retrieval_score") @db.Decimal(5, 4)
  contextWindow    Int?    @map("context_window")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex, embeddingModel])
  @@index([documentId, chunkIndex], map: "idx_document_embeddings_document")
  @@index([embeddingModel, embeddingVersion], map: "idx_document_embeddings_model")
  @@map("document_embeddings")
}

// Query Embeddings Table (RAG Analytics)
model QueryEmbedding {
  id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  queryHash              String   @unique @map("query_hash") @db.VarChar(64)
  queryText              String   @map("query_text")
  embeddingModel         String   @map("embedding_model") @db.VarChar(100)
  embedding              Unsupported("vector(1536)")?
  usageCount             Int      @default(1) @map("usage_count")
  avgConfidence          Decimal? @map("avg_confidence") @db.Decimal(4, 3)
  avgRetrievalScore      Decimal? @map("avg_retrieval_score") @db.Decimal(4, 3)
  successfulRagResponses Int      @default(0) @map("successful_rag_responses")
  intentClassification   Json?    @map("intent_classification") @db.JsonB
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz
  lastUsedAt             DateTime @default(now()) @map("last_used_at") @db.Timestamptz

  @@index([usageCount, lastUsedAt], map: "idx_query_embeddings_usage")
  @@map("query_embeddings")
}

// Message Feedback Table
model MessageFeedback {
  id                      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  messageId               String       @map("message_id") @db.Uuid
  userId                  String       @map("user_id") @db.Uuid
  feedbackType            FeedbackType @map("feedback_type")
  rating                  Int?         @db.SmallInt
  comment                 String?
  improvementSuggestions  Json?        @map("improvement_suggestions") @db.JsonB
  helpfulSources          String[]     @map("helpful_sources") @db.Uuid
  createdAt               DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt               DateTime     @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId], map: "idx_message_feedback_message")
  @@index([feedbackType, createdAt], map: "idx_message_feedback_type")
  @@index([feedbackType, createdAt], map: "idx_message_feedback_type_period")
  @@map("message_feedback")
}

// Conversation Feedback Table
model ConversationFeedback {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String   @map("conversation_id") @db.Uuid
  rating         Int      @db.SmallInt
  comment        String?
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("conversation_feedback")
}

// GDPR Compliance Tables

// User Consents Table
model UserConsent {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String      @map("user_id") @db.Uuid
  consentType   ConsentType @map("consent_type")
  granted       Boolean
  consentDate   DateTime    @map("consent_date") @db.Timestamptz
  consentSource String?     @map("consent_source") @db.VarChar(100)
  ipAddress     String?     @map("ip_address") @db.Inet
  userAgent     String?     @map("user_agent")
  legalBasis    LegalBasis? @map("legal_basis")
  withdrawnDate DateTime?   @map("withdrawn_date") @db.Timestamptz
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_consents")
}

// Data Export Requests Table
model DataExportRequest {
  id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String            @map("user_id") @db.Uuid
  requestType   DataRequestType   @map("request_type")
  status        RequestStatus     @default(PENDING)
  requestedAt   DateTime          @default(now()) @map("requested_at") @db.Timestamptz
  processedAt   DateTime?         @map("processed_at") @db.Timestamptz
  processedBy   String?           @map("processed_by") @db.Uuid
  exportFilePath String?          @map("export_file_path")
  expiryDate    DateTime?         @map("expiry_date") @db.Timestamptz
  notes         String?
  createdAt     DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime          @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_export_requests")
}

// Audit Log Table
model AuditLog {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String?   @map("user_id") @db.Uuid
  action       String    @db.VarChar(100)
  resourceType String?   @map("resource_type") @db.VarChar(50)
  resourceId   String?   @map("resource_id") @db.Uuid
  oldValues    Json?     @map("old_values") @db.JsonB
  newValues    Json?     @map("new_values") @db.JsonB
  ipAddress    String?   @map("ip_address") @db.Inet
  userAgent    String?   @map("user_agent")
  sessionId    String?   @map("session_id") @db.Uuid
  details      Json      @default("{}") @db.JsonB
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId, action, createdAt], map: "idx_audit_logs_user_action")
  @@index([resourceType, resourceId, createdAt], map: "idx_audit_logs_resource")
  @@index([action, createdAt], map: "idx_audit_logs_action_time")
  @@map("audit_logs")
}